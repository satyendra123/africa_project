// this code is worked from anywhere in the world. we can change the ip, port, add, edit, delete the controller from anywhere in the world. 
// my arduino is having a mac address a unique. and with the mac address it will hit the api. and get the config details in the setup and after that 
// it will send the api with the config details
#include <SPI.h>
#include <Ethernet.h>

// Server details
IPAddress server(18, 206, 180, 79);
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0x01 };
const char macStr[] = "DE:AD:BE:EF:FE:01";

// Fallback IP and gate ID
IPAddress fallbackIP(192, 168, 1, 151);
IPAddress myIP;
char gate_id[16] = "2";

const int openRelayPin = 9;
const int closeRelayPin = 8;

EthernetClient client;

const unsigned long reconnectDelay = 3000;
const unsigned long readTimeout = 5000;
unsigned long lastCheckTime = 0;

void setup() {
  Serial.begin(9600);
  pinMode(openRelayPin, OUTPUT);
  pinMode(closeRelayPin, OUTPUT);
  digitalWrite(openRelayPin, HIGH);
  digitalWrite(closeRelayPin, HIGH);

  Serial.println("Starting with fallback config...");
  Ethernet.begin(mac, fallbackIP);
  myIP = fallbackIP;

  Serial.print("Initial IP: ");
  Serial.println(myIP);
  Serial.print("Initial Gate ID: ");
  Serial.println(gate_id);

  // Keep trying to fetch config until successful
  bool configReceived = false;
  while (!configReceived) {
    configReceived = fetchConfigFromServer();
    if (!configReceived) {
      Serial.println("Retrying config fetch in 5 seconds...");
      delay(5000);
    }
  }

  Serial.print("Configured IP: ");
  Serial.println(myIP);
  Serial.print("Gate ID: ");
  Serial.println(gate_id);

  Ethernet.begin(mac, myIP);
  delay(1000);
  lastCheckTime = millis();
}

void loop() {
  if (millis() - lastCheckTime >= reconnectDelay) {
    checkBoomSignal();
    lastCheckTime = millis();
  }
}

bool fetchConfigFromServer() {
  if (client.connect(server, 8000)) {
    String url = "/get_config?mac=" + String(macStr);

    client.print("GET " + url + " HTTP/1.1\r\n");
    client.print("Host: 18.206.180.79\r\n");
    client.print("Connection: close\r\n\r\n");

    unsigned long start = millis();
    String response = "";

    while (millis() - start < readTimeout) {
      while (client.available()) {
        char c = client.read();
        response += c;
        start = millis();  // Reset timeout on data
      }
    }
    client.stop();

    Serial.println("Config Response:");
    Serial.println(response);

    // Extract JSON body
    int jsonStart = response.indexOf('{');
    int jsonEnd = response.lastIndexOf('}');
    if (jsonStart == -1 || jsonEnd == -1 || jsonEnd <= jsonStart) {
      Serial.println("Invalid JSON format.");
      return false;
    }

    String json = response.substring(jsonStart, jsonEnd + 1);

    // Extract IP
    int ipKey = json.indexOf("\"ip\"");
    int ipValStart = json.indexOf(":", ipKey) + 1;
    int ipQuoteStart = json.indexOf("\"", ipValStart) + 1;
    int ipQuoteEnd = json.indexOf("\"", ipQuoteStart);
    String ipStr = json.substring(ipQuoteStart, ipQuoteEnd);

    // Extract Gate ID
    int gidKey = json.indexOf("\"gate_id\"");
    int gidValStart = json.indexOf(":", gidKey) + 1;
    int gidQuoteStart = json.indexOf("\"", gidValStart) + 1;
    int gidQuoteEnd = json.indexOf("\"", gidQuoteStart);
    String gidStr = json.substring(gidQuoteStart, gidQuoteEnd);

    Serial.print("Parsed IP: ");
    Serial.println(ipStr);
    Serial.print("Parsed Gate ID: ");
    Serial.println(gidStr);

    // Convert to IPAddress
    int ip1, ip2, ip3, ip4;
    if (sscanf(ipStr.c_str(), "%d.%d.%d.%d", &ip1, &ip2, &ip3, &ip4) == 4) {
      myIP = IPAddress(ip1, ip2, ip3, ip4);
      gidStr.toCharArray(gate_id, sizeof(gate_id));
      return true;
    } else {
      Serial.println("Failed to parse IP format.");
    }
  } else {
    Serial.println("Failed to connect for config.");
  }
  return false;
}

void checkBoomSignal() {
  if (client.connect(server, 8000)) {
    String ipStr = String(myIP[0]) + "." + String(myIP[1]) + "." + String(myIP[2]) + "." + String(myIP[3]);
    String url = "/check_boomsig?mac=" + String(macStr) + "&ip=" + ipStr + "&gate_id=" + String(gate_id);

    Serial.print("Sending: ");
    Serial.println(url);

    client.print("GET " + url + " HTTP/1.1\r\n");
    client.println("Host: 18.206.180.79");
    client.println("Connection: close");
    client.println();

    unsigned long start = millis();
    String response = "";

    while (millis() - start < readTimeout) {
      if (client.available()) {
        char c = client.read();
        response += c;
        start = millis();
      }
    }

    client.stop();

    Serial.println("Boom Signal Response:");
    Serial.println(response);

    if (response.indexOf("|OPENEN%") != -1) {
      triggerOpenBarrier();
    } else if (response.indexOf("|OPENEX%") != -1) {
      triggerCloseBarrier();
    }
  } else {
    Serial.println("Failed to connect to server for boom signal check.");
  }
}

void triggerOpenBarrier() {
  Serial.println("Opening Barrier...");
  digitalWrite(openRelayPin, LOW);
  delay(500);
  digitalWrite(openRelayPin, HIGH);
}

void triggerCloseBarrier() {
  Serial.println("Closing Barrier...");
  digitalWrite(closeRelayPin, LOW);
  delay(500);
  digitalWrite(closeRelayPin, HIGH);
}
